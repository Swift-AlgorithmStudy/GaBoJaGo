import Foundation

/***
1. 뒤에서부터 출력하여 인덱스를 넘어가지 않도록 한다.
2. 만약 인덱스를 초과한다면, 현재 값(dp[i])은 다음 값(dp[i+1]으로 설정한다. (최대값)
3. 아니라면, 다음 값과 해당 값을 더했을 때(P[i] + dp[i + T[i]])를 비교하여 최대값을 저장한다.
4. 마지막부터 순환했기 때문에 dp[0]을 출력한다.
*/

let N = Int(readLine()!)!

var (T, P, dp) = ([Int](), [Int](), Array(repeating: 0, count: N+1))

for _ in 0..<N {
    let input = readLine()!.split(separator: " ").map { Int($0)! }
    T.append(input[0])
    P.append(input[1])
}

for i in stride(from: N-1, through: 0, by: -1) {
    if i + T[i] > N {
        dp[i] = dp[i+1]
    } else {
        dp[i] = max(dp[i+1], P[i] + dp[i + T[i]])
    }
}

print(dp[0])